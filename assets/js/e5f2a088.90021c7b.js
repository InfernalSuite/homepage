"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[1998],{4641:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=n(4848),o=n(8453);const a={sidebar_position:6},r="Saving Worlds",i={id:"api/saving_worlds",title:"Saving Worlds",description:"All slime worlds are saved when the server is shut down, but sometimes we may want to save them manually.\\",source:"@site/docs_asp/api/saving_worlds.md",sourceDirName:"api",slug:"/api/saving_worlds",permalink:"/docs/asp/api/saving_worlds",draft:!1,unlisted:!1,editUrl:"https://github.com/InfernalSuite/homepage/tree/main/docs_asp/api/saving_worlds.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Loading Worlds",permalink:"/docs/asp/api/loading_worlds"},next:{title:"Importing Worlds",permalink:"/docs/asp/api/importing_worlds"}},d={},l=[{value:"Using the ASP API (recommended)",id:"using-the-asp-api-recommended",level:2},{value:"Using the Bukkit API",id:"using-the-bukkit-api",level:2}];function h(e){const s={br:"br",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"saving-worlds",children:"Saving Worlds"}),"\n",(0,t.jsxs)(s.p,{children:["All slime worlds are saved when the server is shut down, but sometimes we may want to save them manually.",(0,t.jsx)(s.br,{}),"\n","Currently there are two approaches to saving worlds manually:"]}),"\n",(0,t.jsx)(s.h2,{id:"using-the-asp-api-recommended",children:"Using the ASP API (recommended)"}),"\n",(0,t.jsxs)(s.p,{children:["We recommend using the ASP API to save worlds manually, as unlike the other approach, the method blocks until the world is saved.",(0,t.jsx)(s.br,{}),"\n","This method works for both loaded and unloaded worlds.",(0,t.jsx)(s.br,{}),"\n","This can be done by calling the ",(0,t.jsx)(s.code,{children:"saveWorld"})," method in the ",(0,t.jsx)(s.code,{children:"AdvancedSlimePaperAPI"})," class.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Remember: this is an I/O operation and should be done asynchronously."})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:"/*\n * world - the world to save\n */\nasp.saveWorld(world); // Blocks until the world is saved\n// Now we can assume that the world is saved\n"})}),"\n",(0,t.jsx)(s.h2,{id:"using-the-bukkit-api",children:"Using the Bukkit API"}),"\n",(0,t.jsxs)(s.p,{children:["If the world is loaded and, you can save it manually by calling the ",(0,t.jsx)(s.code,{children:"save"})," method in the ",(0,t.jsx)(s.code,{children:"World"})," class.",(0,t.jsx)(s.br,{}),"\n","The difference between this and the ASP API is that this method is asynchronous and only schedules the save operation.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.strong,{children:"Remember: we are directly interacting with the server meaning this must be done synchronously."})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-java",children:'World world = Bukkit.getWorld("worldName");\nworld.save(); // Returns almost immediately and schedules the save operation\n// At this point, the world has most likely not been saved yet\n'})})]})}function c(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>i});var t=n(6540);const o={},a=t.createContext(o);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);